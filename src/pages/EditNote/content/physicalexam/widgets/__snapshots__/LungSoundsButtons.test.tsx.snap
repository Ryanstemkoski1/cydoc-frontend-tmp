// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LungSoundsButtons matches snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(LungSoundsButtons)
    lungLobe="leftLowerLobe"
  >
    <LungSoundsButtons
      lungLobe="leftLowerLobe"
      sections={
        Object {
          "bronchialBreathSounds": false,
          "egophony": false,
          "rales": false,
          "rhonchi": false,
          "stridor": false,
          "vesicularBreathSounds": false,
          "wheezes": false,
          "whistling": false,
        }
      }
      toggleSection={[Function]}
    >
      <div>
        <Button
          active={false}
          as="button"
          className="pe-ros-button spaced-buttons"
          content="wheezes"
          key="wheezes"
          onClick={[Function]}
          size="small"
        >
          <Ref
            innerRef={
              Object {
                "current": <button
                  class="ui small button pe-ros-button spaced-buttons"
                >
                  wheezes
                </button>,
              }
            }
          >
            <RefFindNode
              innerRef={
                Object {
                  "current": <button
                    class="ui small button pe-ros-button spaced-buttons"
                  >
                    wheezes
                  </button>,
                }
              }
            >
              <button
                className="ui small button pe-ros-button spaced-buttons"
                onClick={[Function]}
              >
                wheezes
              </button>
            </RefFindNode>
          </Ref>
        </Button>
        <Button
          active={false}
          as="button"
          className="pe-ros-button spaced-buttons"
          content="rales"
          key="rales"
          onClick={[Function]}
          size="small"
        >
          <Ref
            innerRef={
              Object {
                "current": <button
                  class="ui small button pe-ros-button spaced-buttons"
                >
                  rales
                </button>,
              }
            }
          >
            <RefFindNode
              innerRef={
                Object {
                  "current": <button
                    class="ui small button pe-ros-button spaced-buttons"
                  >
                    rales
                  </button>,
                }
              }
            >
              <button
                className="ui small button pe-ros-button spaced-buttons"
                onClick={[Function]}
              >
                rales
              </button>
            </RefFindNode>
          </Ref>
        </Button>
        <Button
          active={false}
          as="button"
          className="pe-ros-button spaced-buttons"
          content="rhonchi"
          key="rhonchi"
          onClick={[Function]}
          size="small"
        >
          <Ref
            innerRef={
              Object {
                "current": <button
                  class="ui small button pe-ros-button spaced-buttons"
                >
                  rhonchi
                </button>,
              }
            }
          >
            <RefFindNode
              innerRef={
                Object {
                  "current": <button
                    class="ui small button pe-ros-button spaced-buttons"
                  >
                    rhonchi
                  </button>,
                }
              }
            >
              <button
                className="ui small button pe-ros-button spaced-buttons"
                onClick={[Function]}
              >
                rhonchi
              </button>
            </RefFindNode>
          </Ref>
        </Button>
        <Popup
          disabled={false}
          eventsEnabled={true}
          flowing={true}
          hoverable={true}
          offset={0}
          on={
            Array [
              "click",
              "hover",
            ]
          }
          pinned={false}
          position="bottom center"
          trigger={
            <Button
              as="button"
              circular={true}
              className="pe-ros-button spaced-buttons"
              icon="plus"
            />
          }
        >
          <Portal
            closeOnDocumentClick={true}
            closeOnEscape={true}
            closeOnPortalMouseLeave={true}
            closeOnTriggerClick={true}
            closeOnTriggerMouseLeave={true}
            eventPool="default"
            mouseEnterDelay={50}
            mouseLeaveDelay={70}
            onClose={[Function]}
            onMount={[Function]}
            onOpen={[Function]}
            onUnmount={[Function]}
            openOnTriggerClick={true}
            openOnTriggerMouseEnter={true}
            trigger={
              <Button
                as="button"
                circular={true}
                className="pe-ros-button spaced-buttons"
                icon="plus"
              />
            }
            triggerRef={
              Object {
                "current": <button
                  class="ui circular icon button pe-ros-button spaced-buttons"
                >
                  <i
                    aria-hidden="true"
                    class="plus icon"
                  />
                </button>,
              }
            }
          >
            <Ref
              innerRef={[Function]}
            >
              <RefFindNode
                innerRef={[Function]}
              >
                <Button
                  as="button"
                  circular={true}
                  className="pe-ros-button spaced-buttons"
                  icon="plus"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onFocus={[Function]}
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                >
                  <Ref
                    innerRef={
                      Object {
                        "current": <button
                          class="ui circular icon button pe-ros-button spaced-buttons"
                        >
                          <i
                            aria-hidden="true"
                            class="plus icon"
                          />
                        </button>,
                      }
                    }
                  >
                    <RefFindNode
                      innerRef={
                        Object {
                          "current": <button
                            class="ui circular icon button pe-ros-button spaced-buttons"
                          >
                            <i
                              aria-hidden="true"
                              class="plus icon"
                            />
                          </button>,
                        }
                      }
                    >
                      <button
                        className="ui circular icon button pe-ros-button spaced-buttons"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                      >
                        <Icon
                          as="i"
                          name="plus"
                        >
                          <i
                            aria-hidden="true"
                            className="plus icon"
                            onClick={[Function]}
                          />
                        </Icon>
                      </button>
                    </RefFindNode>
                  </Ref>
                </Button>
              </RefFindNode>
            </Ref>
          </Portal>
        </Popup>
      </div>
    </LungSoundsButtons>
  </Connect(LungSoundsButtons)>
</Provider>
`;
